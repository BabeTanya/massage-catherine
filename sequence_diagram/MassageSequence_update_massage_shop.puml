@startuml Update Massage Shop (PUT)

header Sameple Massage Shop Sequence Diagram
footer Page %page% of %lastpage%
title "Update Massage Shop (PUT)"

participant "Client" as client
participant "<<javaScript>>\n:server" as server
participant "<<router>>\n:massage-shops" as routerMassageShop
participant "<<middleware>>\n:auth" as middleware
participant "<<service>>\n:jwt" as service
participant "<<controllers>>\n:updateMassageShop" as controllersUpdateMassageShop
participant "<<model>>\n:User" as modelUser
participant "<<model>>\n:MassageShop" as modelMassageShop
database "<<MongoDB>>\n:users" as UsersDatabase
database "<<MongoDB>>\n:massageShop" as MassageShopDatabase

client->server ++:req.put('/massage-shops/:id')
server->routerMassageShop ++:app.use('/massage-shops/:id', massageShops)
routerMassageShop -> middleware ++:protect()
middleware -> service ++:verify(token, secret)
middleware <-- service ++:decoded
middleware -> modelUser ++:findById(decoded id)
modelUser -> UsersDatabase ++:findById({_id:decoded id})
modelUser <-- UsersDatabase ++:user
middleware <-- modelUser ++:user
routerMassageShop <-- middleware ++:user
routerMassageShop -> middleware ++:authorize('admin')
middleware -> middleware ++:includes(req.user.role)
routerMassageShop <-- middleware ++:next()
alt case User is user role
client<--routerMassageShop: Unauthorize Response
' client <-- server: Unauthorize Response
else case User is admin role
routerMassageShop -> controllersUpdateMassageShop ++:updateMassageShop()
controllersUpdateMassageShop->modelMassageShop ++:updateMassageShop(req.params.id, req.body)
modelMassageShop ->MassageShopDatabase ++: MassageShopSchema
MassageShopDatabase --> modelMassageShop --: massageShop
controllersUpdateMassageShop <-- modelMassageShop --:massageShop
client <-- controllersUpdateMassageShop --:response
' server <-- routerMassageShop --:response
' client <-- server --:response
end

@enduml