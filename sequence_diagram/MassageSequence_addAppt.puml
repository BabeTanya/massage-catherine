@startuml Add Appointments (POST)

header Sameple Massage Shop Sequence Diagram
footer Page %page% of %lastpage%
title "Add Appointments (POST)"

participant "Client" as client
participant "<<javaScript>>\n:server" as server
participant "<<router>>\n:appointments" as routerAppointments
participant "<<controllers>>\n:appointments" as controllersAppointments
participant "<<model>>\n:appointment" as modelAppointment
database "<<MongoDB>>\n:appointments" as AppointmentsDatabase

client->server ++:req.post('massageShops/:massageShopId/appointments')
server->routerAppointments ++:app.use('massageShops/:massageShopId/appointments')
routerAppointments -> controllersAppointments ++:addAppointment()
controllersAppointments->modelAppointment: req.params.massageShopId
modelAppointment ->AppointmentsDatabase ++: find massage shop id at AppointmentSchema
modelAppointment <-- AppointmentsDatabase ++: response
controllersAppointments <-- modelAppointment ++: response
alt Massage shop does not exist
  routerAppointments <-- controllersAppointments --:response
  server <-- routerAppointments --:response
  client <-- server --:response
else Massage shop exist
  controllersAppointments->modelAppointment: req.user.id
  modelAppointment ->AppointmentsDatabase ++: check for exist appt
  modelAppointment <-- AppointmentsDatabase ++: response
  controllersAppointments <-- modelAppointment ++: response
  alt Appointment does not exist
    controllersAppointments->modelAppointment ++:addAppointment(req.body)
    modelAppointment ->AppointmentsDatabase ++: AppointmentSchema
    AppointmentsDatabase --> modelAppointment --: appointment
    controllersAppointments <-- modelAppointment --:appointment
    routerAppointments <-- controllersAppointments --:response
    server <-- routerAppointments --:response
    client <-- server --:response
  else Appointment exist
    controllersAppointments->modelAppointment: req.user.role
    modelAppointment ->AppointmentsDatabase ++: check role user
    modelAppointment <-- AppointmentsDatabase ++: response
    controllersAppointments <-- modelAppointment ++: response
    alt User is admin role
      controllersAppointments->modelAppointment ++:addAppointment(req.body)
      modelAppointment ->AppointmentsDatabase ++: AppointmentSchema
      AppointmentsDatabase --> modelAppointment --: appointment
      controllersAppointments <-- modelAppointment --:appointment
      routerAppointments <-- controllersAppointments --:response
      server <-- routerAppointments --:response
      client <-- server --:response
    else User is user role
      alt Add Appointment under 3 times
        controllersAppointments->modelAppointment ++:addAppointment(req.body)
        modelAppointment ->AppointmentsDatabase ++: AppointmentSchema
        AppointmentsDatabase --> modelAppointment --: appointment
        controllersAppointments <-- modelAppointment --:appointment
        routerAppointments <-- controllersAppointments --:response
        server <-- routerAppointments --:response
        client <-- server --:response
      else Add Appointment over 3 times
        controllersAppointments->modelAppointment ++:addAppointment(req.body)
        modelAppointment ->AppointmentsDatabase ++: AppointmentSchema
        AppointmentsDatabase --> modelAppointment --: response fail
        controllersAppointments <-- modelAppointment --: response fail
        routerAppointments <-- controllersAppointments --:response fail
        server <-- routerAppointments --:response fail
        client <-- server --:response fail
      end
    end
  end
end

@enduml
